name: Test Formula

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test-scope:
        description: 'Test scope'
        required: false
        default: 'full'
        type: choice
        options:
          - 'full'
          - 'syntax-only'
          - 'quick'
          - 'comprehensive'
      force-install:
        description: 'Force formula installation (ignore cache)'
        required: false
        default: false
        type: boolean
  schedule:
    # Test weekly on Sundays at 6 AM UTC to catch upstream changes
    - cron: '0 6 * * 0'

permissions:
  contents: read
  actions: read
  checks: write

env:
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1

jobs:
  setup:
    name: Setup Test Configuration
    runs-on: ubuntu-latest
    outputs:
      test-scope: ${{ steps.config.outputs.test-scope }}
      test-matrix: ${{ steps.config.outputs.test-matrix }}
      run-syntax: ${{ steps.config.outputs.run-syntax }}
      run-install: ${{ steps.config.outputs.run-install }}
      run-comprehensive: ${{ steps.config.outputs.run-comprehensive }}
    
    steps:
      - name: Configure test parameters
        id: config
        run: |
          # Determine test scope
          if [ "${{ github.event_name }}" = "schedule" ]; then
            test_scope="comprehensive"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            test_scope="${{ inputs.test-scope }}"
          elif [ "${{ github.event_name }}" = "push" ]; then
            test_scope="full"
          else
            test_scope="quick"
          fi
          
          echo "test-scope=$test_scope" >> $GITHUB_OUTPUT
          
          # Configure test matrix based on scope
          case "$test_scope" in
            "syntax-only")
              matrix='{"os": ["ubuntu-latest"], "include": []}'
              run_syntax="true"
              run_install="false"
              run_comprehensive="false"
              ;;
            "quick")
              matrix='{"os": ["ubuntu-latest"], "include": []}'
              run_syntax="true"
              run_install="true"
              run_comprehensive="false"
              ;;
            "comprehensive")
              matrix='{"os": ["ubuntu-latest", "macos-12", "macos-13"], "include": [{"os": "ubuntu-latest", "test-deps": true}]}'
              run_syntax="true"
              run_install="true"
              run_comprehensive="true"
              ;;
            *)
              matrix='{"os": ["ubuntu-latest", "macos-12"], "include": []}'
              run_syntax="true"
              run_install="true"
              run_comprehensive="false"
              ;;
          esac
          
          echo "test-matrix=$matrix" >> $GITHUB_OUTPUT
          echo "run-syntax=$run_syntax" >> $GITHUB_OUTPUT
          echo "run-install=$run_install" >> $GITHUB_OUTPUT
          echo "run-comprehensive=$run_comprehensive" >> $GITHUB_OUTPUT
          
          echo "## Test Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Scope**: $test_scope" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Syntax Tests**: $run_syntax" >> $GITHUB_STEP_SUMMARY
          echo "- **Install Tests**: $run_install" >> $GITHUB_STEP_SUMMARY
          echo "- **Comprehensive Tests**: $run_comprehensive" >> $GITHUB_STEP_SUMMARY

  syntax-validation:
    name: Syntax and URL Validation
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: needs.setup.outputs.run-syntax == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master
        
      - name: Validate formula syntax
        timeout-minutes: 5
        run: |
          echo "üîç Validating formula syntax..."
          
          # Add this tap to Homebrew for testing
          brew tap homebrew-rxiv-maker/test ${{ github.workspace }}
          
          # Test formula syntax using tap path
          brew audit --strict --formula homebrew-rxiv-maker/test/rxiv-maker
          
          # Test formula parsing using path
          brew info --formula ./Formula/rxiv-maker.rb
          
          echo "‚úÖ Formula syntax validation passed"
          
      - name: Verify download URLs
        timeout-minutes: 5
        run: |
          echo "üåê Verifying download URLs..."
          
          # Check main package URL
          MAIN_URL=$(grep -E '^\s*url' Formula/rxiv-maker.rb | head -1 | sed 's/.*"\(.*\)".*/\1/')
          echo "Main URL: $MAIN_URL"
          curl -I -f "$MAIN_URL"
          
          # Check resource URLs (sample)
          echo "Testing resource URLs..."
          grep -A 1 'resource.*do' Formula/rxiv-maker.rb | grep 'url' | head -5 | while read -r line; do
            URL=$(echo "$line" | sed 's/.*"\(.*\)".*/\1/')
            echo "Testing: $URL"
            curl -I -f "$URL" --max-time 30
          done
          
          echo "‚úÖ All download URLs verified"
          
      - name: Check Python dependencies
        timeout-minutes: 5
        run: |
          echo "üêç Validating Python dependencies..."
          
          python3 -c "
import re
import urllib.request
import urllib.error

with open('Formula/rxiv-maker.rb', 'r') as f:
    content = f.read()

# Extract resource blocks
resources = re.findall(r'resource \"([^\"]+)\" do.*?end', content, re.DOTALL)

print('Python dependencies found in formula:')
for resource in resources:
    print(f'  - {resource}')
    
# Verify each dependency exists on PyPI
failed = []
for resource in resources:
    try:
        url = f'https://pypi.org/pypi/{resource}/json'
        urllib.request.urlopen(url)
        print(f'‚úì {resource} exists on PyPI')
    except urllib.error.URLError as e:
        print(f'‚úó {resource} not found on PyPI: {e}')
        failed.append(resource)

if failed:
    print(f'Failed dependencies: {failed}')
    exit(1)
else:
    print('‚úÖ All dependencies verified on PyPI')
"
          
      - name: Check version consistency
        timeout-minutes: 3
        run: |
          echo "üìä Checking version consistency..."
          
          # Extract version from formula
          FORMULA_VERSION=$(grep -E '^\s*url.*rxiv_maker-' Formula/rxiv-maker.rb | sed 's/.*rxiv_maker-\([0-9.]*\)\.tar\.gz.*/\1/')
          echo "Formula version: $FORMULA_VERSION"
          
          # Check if version exists on PyPI
          curl -f "https://pypi.org/pypi/rxiv-maker/$FORMULA_VERSION/json" > /dev/null
          echo "‚úÖ Version $FORMULA_VERSION exists on PyPI"

  formula-installation:
    name: Formula Installation Test
    needs: [setup, syntax-validation]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    if: needs.setup.outputs.run-install == 'true'
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.test-matrix) }}
      fail-fast: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master
        
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libfreetype6-dev \
            libjpeg-dev \
            libpng-dev \
            libtiff-dev \
            libwebp-dev \
            libopenjp2-7-dev \
            zlib1g-dev \
            liblcms2-dev \
            libffi-dev \
            pkg-config
        
      - name: Install formula
        timeout-minutes: 35
        run: |
          echo "üîß Installing rxiv-maker formula..."
          
          # Force installation if requested
          if [ "${{ inputs.force-install }}" = "true" ]; then
            echo "Force installation enabled"
            brew install --force --formula ./Formula/rxiv-maker.rb
          else
            brew install --formula ./Formula/rxiv-maker.rb
          fi
          
          echo "‚úÖ Formula installation completed"
          
      - name: Verify installation
        timeout-minutes: 5
        run: |
          echo "üîç Verifying installation..."
          
          # Check if rxiv command is available
          which rxiv
          rxiv --version
          rxiv --help
          
          # Test Python module import
          python3 -c "
import sys
import os

# Add Homebrew site-packages to Python path
brew_prefix = os.popen('brew --prefix rxiv-maker').read().strip()
site_packages = os.path.join(brew_prefix, 'libexec', 'lib')

# Find the python site-packages directory
import glob
python_dirs = glob.glob(os.path.join(site_packages, 'python*', 'site-packages'))
if python_dirs:
    sys.path.append(python_dirs[0])

import rxiv_maker
print('‚úÖ Python module import successful')
print(f'rxiv-maker version: {rxiv_maker.__version__}')
"
          
      - name: Test CLI functionality
        timeout-minutes: 10
        run: |
          echo "üß™ Testing CLI functionality..."
          
          # Test CLI commands that don't require LaTeX
          rxiv config show || echo "Config command not available"
          
          # Initialize test manuscript
          mkdir -p test-manuscript
          cd test-manuscript
          
          # Test init command
          rxiv init test-project || echo "Init command may not be available"
          
          # If files were created, verify structure
          if [ -f "00_CONFIG.yml" ]; then
            echo "‚úÖ Manuscript initialization successful"
            test -f "01_MAIN.md" || (echo "MAIN file not created" && exit 1)
            test -f "02_SUPPLEMENTARY_INFO.md" || (echo "SUPPLEMENTARY file not created" && exit 1)
            test -f "03_REFERENCES.bib" || (echo "REFERENCES file not created" && exit 1)
          else
            echo "‚ÑπÔ∏è Manuscript initialization may use different structure"
          fi
          
          echo "‚úÖ CLI functionality tests passed"
          
      - name: Test with LaTeX (macOS only)
        if: runner.os == 'macOS'
        timeout-minutes: 15
        run: |
          echo "üìÑ Testing LaTeX functionality..."
          
          # Install BasicTeX for testing
          brew install --cask basictex
          
          # Add LaTeX to PATH - find the most recent version
          TEXLIVE_YEAR=$(find /usr/local/texlive -maxdepth 1 -type d -name "20*" | sort -V | tail -1 | xargs basename 2>/dev/null)
          if [ -n "$TEXLIVE_YEAR" ]; then
            export PATH="/usr/local/texlive/$TEXLIVE_YEAR/bin/universal-darwin:$PATH"
            echo "Added LaTeX $TEXLIVE_YEAR to PATH"
          else
            export PATH="/usr/local/texlive/2023/bin/universal-darwin:$PATH"
            echo "Using fallback LaTeX 2023 PATH"
          fi
          
          # Test PDF generation with proper error handling
          if [ -d "test-manuscript" ]; then
            cd test-manuscript
            LATEX_TEST_CODE=0
            rxiv validate --no-doi || LATEX_TEST_CODE=$?
            
            if [ $LATEX_TEST_CODE -ne 0 ]; then
              echo "‚ö†Ô∏è LaTeX validation failed with exit code: $LATEX_TEST_CODE"
              echo "This is expected without full LaTeX package installation"
              # Check if LaTeX is at least available
              if command -v pdflatex >/dev/null 2>&1; then
                echo "‚úÖ LaTeX binary is available: $(which pdflatex)"
                pdflatex --version | head -1
              else
                echo "‚ùå LaTeX binary not found in PATH"
                exit 1
              fi
            else
              echo "‚úÖ LaTeX validation passed"
            fi
          else
            echo "‚ùå test-manuscript directory not found"
            exit 1
          fi
          
          echo "‚úÖ LaTeX integration test completed"

  python-environment-testing:
    name: Python Environment Testing
    needs: [setup, formula-installation]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    if: needs.setup.outputs.run-comprehensive == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-12]
        python-version: ["3.11", "3.12"]
      fail-fast: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master
        
      - name: Install rxiv-maker
        run: |
          brew install --formula ./Formula/rxiv-maker.rb
          
      - name: Test Python virtual environment isolation
        run: |
          echo "üêç Testing Python virtual environment isolation..."
          
          # Find the rxiv-maker virtualenv
          RXIV_PREFIX=$(brew --prefix rxiv-maker)
          RXIV_VENV="$RXIV_PREFIX/libexec"
          
          echo "rxiv-maker prefix: $RXIV_PREFIX"
          echo "Virtual environment: $RXIV_VENV"
          
          # Test that virtualenv is properly isolated
          "$RXIV_VENV/bin/python" -c "
import sys
print('Python executable:', sys.executable)
print('Python version:', sys.version)
print('Virtual environment:', sys.prefix)

# Check isolation
if 'homebrew' not in sys.prefix.lower():
    print('‚ùå Virtual environment not properly isolated')
    sys.exit(1)
else:
    print('‚úÖ Virtual environment properly isolated')
"
          
      - name: Test dependency installation
        run: |
          echo "üì¶ Testing dependency installation..."
          
          RXIV_PREFIX=$(brew --prefix rxiv-maker)
          RXIV_VENV="$RXIV_PREFIX/libexec"
          
          # Check all required dependencies are installed
          "$RXIV_VENV/bin/python" -c "
import sys

required_packages = [
    'click', 'matplotlib', 'numpy', 'pandas', 'scipy',
    'seaborn', 'PIL', 'pypdf', 'yaml', 'crossref_commons',
    'rich', 'rich_click'
]

missing = []
for package in required_packages:
    try:
        if package == 'PIL':
            __import__('PIL')
        elif package == 'yaml':
            __import__('yaml')
        else:
            __import__(package)
        print(f'‚úì {package} installed')
    except ImportError:
        print(f'‚úó {package} missing')
        missing.append(package)

if missing:
    print(f'\\n‚ùå Missing packages: {missing}')
    sys.exit(1)
else:
    print('\\n‚úÖ All dependencies installed correctly')
"
          
      - name: Test CLI entry points
        run: |
          echo "üîß Testing CLI entry points..."
          
          # Test that rxiv command works from anywhere
          cd /tmp
          rxiv --version
          rxiv --help
          
          # Test Python module execution
          python3 -m rxiv_maker.cli --version || echo "Module execution may require different syntax"
          
      - name: Test package isolation from system Python
        run: |
          echo "üîí Testing package isolation from system Python..."
          
          # Try to import rxiv_maker from system Python (should fail)
          if python3 -c "import rxiv_maker" 2>/dev/null; then
            echo "‚ùå rxiv_maker is accessible from system Python (not properly isolated)"
            exit 1
          else
            echo "‚úÖ rxiv_maker is properly isolated from system Python"
          fi
          
      - name: Performance benchmarks
        run: |
          echo "üìä Running performance benchmarks..."
          
          # Test CLI startup time
          START_TIME=$(date +%s.%N)
          rxiv --version > /dev/null
          END_TIME=$(date +%s.%N)
          DURATION=$(echo "$END_TIME - $START_TIME" | bc)
          echo "CLI startup time: ${DURATION}s"
          
          # Test import time
          RXIV_PREFIX=$(brew --prefix rxiv-maker)
          RXIV_VENV="$RXIV_PREFIX/libexec"
          
          "$RXIV_VENV/bin/python" -c "
import time
start = time.time()
import rxiv_maker
end = time.time()
print(f'Import time: {end - start:.3f}s')
"
          
          echo "‚úÖ Performance benchmarks completed"

  comprehensive-testing:
    name: Comprehensive Testing
    needs: [setup, formula-installation]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: needs.setup.outputs.run-comprehensive == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master
        
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libfreetype6-dev \
            libjpeg-dev \
            libpng-dev \
            libtiff-dev \
            libwebp-dev \
            libopenjp2-7-dev \
            zlib1g-dev \
            liblcms2-dev \
            libffi-dev \
            pkg-config
        
      - name: Install and test formula
        timeout-minutes: 20
        run: |
          # Install formula
          brew install --formula ./Formula/rxiv-maker.rb
          
          # Comprehensive functionality test
          echo "üîç Running comprehensive tests..."
          
          # Test version and help
          rxiv --version
          rxiv --help
          
          # Test configuration
          rxiv config show
          
          # Test manuscript operations
          mkdir comprehensive-test
          cd comprehensive-test
          
          # Test various CLI commands
          rxiv init test-manuscript
          
          if [ -d "test-manuscript" ]; then
            cd test-manuscript
            
            # Test validation
            rxiv validate --no-doi
            
            # Test figure generation (if available)
            rxiv figures --help || echo "Figures command not available"
            
            # Test bibliography commands
            rxiv bibliography --help || echo "Bibliography command not available"
            
            echo "‚úÖ Comprehensive testing completed"
          else
            echo "‚ÑπÔ∏è Manuscript directory not created, testing CLI only"
          fi
          
      - name: Test installation from tap
        timeout-minutes: 15
        run: |
          echo "üç∫ Testing installation from tap..."
          
          # Uninstall local version
          brew uninstall rxiv-maker || echo "Formula not installed"
          
          # Add tap (this would be the real tap in production)
          # brew tap henriqueslab/rxiv-maker
          # brew install rxiv-maker
          
          echo "‚ÑπÔ∏è Tap installation test skipped (requires published tap)"
          
      - name: Performance benchmarks
        timeout-minutes: 10
        run: |
          echo "üìä Running performance benchmarks..."
          
          # Test CLI startup time
          time rxiv --version
          
          # Test import time
          time python3 -c "
import sys
import os
import glob

# Add Homebrew site-packages to Python path
brew_prefix = os.popen('brew --prefix rxiv-maker').read().strip()
site_packages = os.path.join(brew_prefix, 'libexec', 'lib')
python_dirs = glob.glob(os.path.join(site_packages, 'python*', 'site-packages'))
if python_dirs:
    sys.path.append(python_dirs[0])

import rxiv_maker
print('Import successful')
"
          
          echo "‚úÖ Performance benchmarks completed"

  summary:
    name: Test Summary
    needs: [setup, syntax-validation, formula-installation, python-environment-testing, comprehensive-testing]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Generate test summary
        run: |
          echo "# Formula Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test Scope**: ${{ needs.setup.outputs.test-scope }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Syntax validation
          if [ "${{ needs.syntax-validation.result }}" = "success" ]; then
            echo "‚úÖ **Syntax Validation**: All checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Syntax Validation**: Issues found" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Formula installation
          if [ "${{ needs.formula-installation.result }}" = "success" ]; then
            echo "‚úÖ **Formula Installation**: All platforms successful" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.formula-installation.result }}" = "failure" ]; then
            echo "‚ùå **Formula Installation**: Some platforms failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚è≠Ô∏è **Formula Installation**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Python environment testing
          if [ "${{ needs.python-environment-testing.result }}" = "success" ]; then
            echo "‚úÖ **Python Environment Testing**: All tests passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.python-environment-testing.result }}" = "failure" ]; then
            echo "‚ùå **Python Environment Testing**: Some tests failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚è≠Ô∏è **Python Environment Testing**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Comprehensive testing
          if [ "${{ needs.comprehensive-testing.result }}" = "success" ]; then
            echo "‚úÖ **Comprehensive Testing**: All tests passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.comprehensive-testing.result }}" = "failure" ]; then
            echo "‚ùå **Comprehensive Testing**: Some tests failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚è≠Ô∏è **Comprehensive Testing**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Result**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY