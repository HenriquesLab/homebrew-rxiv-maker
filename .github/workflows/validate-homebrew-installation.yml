name: 🧪 Validate Homebrew Installation

on:
  push:
    branches: [main]
    paths:
      - 'Formula/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main]
    paths:
      - 'Formula/**'
      - '.github/workflows/**'
  schedule:
    # Run weekly on Mondays at 06:00 UTC to catch regressions
    - cron: '0 6 * * 1'
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test mode to run'
        required: true
        default: 'standard'
        type: choice
        options:
        - standard
        - fast
        - comprehensive
        - debug
      skip_build:
        description: 'Skip PDF build test (faster testing)'
        required: false
        default: false
        type: boolean

env:
  # GitHub token for API access
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  # Homebrew environment
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  
  # Test timeouts (seconds)
  INSTALL_TIMEOUT: 1200
  BUILD_TIMEOUT: 600
  TEST_TIMEOUT: 300

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-installation:
    name: 🧪 Test ${{ matrix.os }} (${{ matrix.mode }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS Testing
          - os: macos-latest
            mode: standard
            homebrew-prefix: /opt/homebrew
            
          # Linux Testing  
          - os: ubuntu-latest
            mode: standard
            homebrew-prefix: /home/linuxbrew/.linuxbrew
            
          # Fast mode for quick feedback
          - os: ubuntu-latest
            mode: fast
            homebrew-prefix: /home/linuxbrew/.linuxbrew

    env:
      HOMEBREW_PREFIX: ${{ matrix.homebrew-prefix }}
      TEST_MODE: ${{ matrix.mode }}

    steps:
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📊 System Information  
        shell: bash
        run: |
          echo "::group::System Information"
          echo "OS: $(uname -s) $(uname -r)"
          echo "Architecture: $(uname -m)"
          echo "CPU cores: $(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 'unknown')"
          echo "Memory: $(free -h 2>/dev/null | head -2 | tail -1 || echo 'unknown')"
          echo "Disk space: $(df -h . | tail -1 || echo 'unknown')"
          echo "Shell: $SHELL"
          echo "Test mode: $TEST_MODE"
          echo "::endgroup::"

      - name: 🍺 Setup Homebrew (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          echo "::group::Installing Homebrew on Linux"
          if ! command -v brew &> /dev/null; then
            echo "Installing Homebrew..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            
            # Add to PATH for current session
            echo "${{ matrix.homebrew-prefix }}/bin" >> $GITHUB_PATH
            export PATH="${{ matrix.homebrew-prefix }}/bin:$PATH"
            
            # Verify installation
            brew --version
            echo "✓ Homebrew installed successfully"
          else
            echo "✓ Homebrew already available"
          fi
          echo "::endgroup::"

      - name: 🔧 Configure Homebrew Environment
        shell: bash
        run: |
          echo "::group::Homebrew Configuration"
          
          # Ensure PATH is set correctly
          export PATH="${{ matrix.homebrew-prefix }}/bin:$PATH"
          echo "${{ matrix.homebrew-prefix }}/bin" >> $GITHUB_PATH
          
          # Update Homebrew (with platform-specific timeout)
          if command -v timeout >/dev/null 2>&1; then
            timeout 300 brew update || echo "Warning: brew update timed out"
          elif command -v gtimeout >/dev/null 2>&1; then
            gtimeout 300 brew update || echo "Warning: brew update timed out"
          else
            # No timeout available - run directly with risk of hanging
            echo "No timeout command available, running brew update directly..."
            brew update || echo "Warning: brew update failed"
          fi
          
          # Show Homebrew status
          echo "Homebrew version: $(brew --version | head -1)"
          echo "Homebrew prefix: $(brew --prefix)"
          echo "Homebrew repository: $(brew --repository)"
          
          # macOS-specific setup: ensure command line tools are available
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "Setting up macOS build environment..."
            
            # Check if Xcode command line tools are installed
            if ! xcode-select -p >/dev/null 2>&1; then
              echo "Installing Xcode command line tools..."
              sudo xcode-select --install || echo "Command line tools installation started (may be already installed)"
              
              # Wait a bit for installation to start
              sleep 5
              
              # Check again
              xcode-select -p >/dev/null 2>&1 && echo "✓ Xcode command line tools available" || echo "⚠️ Command line tools may not be fully installed"
            else
              echo "✓ Xcode command line tools already installed"
            fi
            
            # Ensure Python development headers are available
            echo "Checking Python development environment..."
            python3 -c "import distutils.util; print('✓ Python development tools available')" 2>/dev/null || echo "⚠️ Python development tools may be limited"
          fi
          
          # Verify we can access formula
          ls -la Formula/
          echo "✓ Homebrew environment configured"
          echo "::endgroup::"

      - name: 🔗 Add rxiv-maker Tap
        shell: bash
        run: |
          echo "::group::Adding rxiv-maker Tap"
          
          # Add our tap locally  
          brew tap henriqueslab/rxiv-maker "$(pwd)"
          
          # Verify tap was added
          brew tap | grep henriqueslab/rxiv-maker
          
          # List available formulae in our tap
          brew search henriqueslab/rxiv-maker/
          
          echo "✓ Tap added successfully"
          echo "::endgroup::"

      - name: 🧪 Validate Formula Syntax
        shell: bash
        run: |
          echo "::group::Formula Validation"
          
          # Check formula syntax
          brew audit --strict henriqueslab/rxiv-maker/rxiv-maker
          
          # Check formula style
          brew style Formula/rxiv-maker.rb
          
          echo "✓ Formula validation passed"
          echo "::endgroup::"

      - name: ⚡ Fast Mode Tests
        if: matrix.mode == 'fast' || inputs.test_mode == 'fast'
        shell: bash
        run: |
          echo "::group::Fast Mode - Basic Validation Only"
          echo "✓ Fast mode validation completed (syntax check only)"
          echo "::endgroup::"

      - name: 📦 Install rxiv-maker
        if: matrix.mode != 'fast' && inputs.test_mode != 'fast'
        shell: bash
        timeout-minutes: 25
        run: |
          echo "::group::Installing rxiv-maker"
          
          # Record start time
          start_time=$(date +%s)
          
          # Pre-installation checks and setup
          echo "Pre-installation environment check:"
          echo "Python version: $(python3 --version 2>/dev/null || echo 'not found')"
          echo "Pip version: $(pip3 --version 2>/dev/null || echo 'not found')"
          echo "Pipx version: $(pipx --version 2>/dev/null || echo 'not found')"
          echo "Node version: $(node --version 2>/dev/null || echo 'not found')"
          
          # Install with verbose output and platform-specific timeout
          echo "Starting rxiv-maker installation..."
          install_cmd="brew install --verbose henriqueslab/rxiv-maker/rxiv-maker"
          if command -v timeout >/dev/null 2>&1; then
            timeout $INSTALL_TIMEOUT $install_cmd
          elif command -v gtimeout >/dev/null 2>&1; then
            gtimeout $INSTALL_TIMEOUT $install_cmd
          else
            # No timeout available - run directly
            echo "No timeout command available, running brew install directly..."
            $install_cmd
          fi
          
          if [ $? -ne 0 ]; then
            echo "❌ Installation failed or timed out"
            echo "Gathering diagnostic information..."
            
            # Gather diagnostic information
            echo "::group::Diagnostic Information"
            echo "Homebrew config:"
            brew --config
            
            echo "Recent homebrew logs (last 50 lines):"
            tail -50 "$(brew --repository)/Library/Homebrew/debug.log" 2>/dev/null || echo "No debug log found"
            
            echo "System information:"
            uname -a
            echo "Available disk space:"
            df -h
            echo "Memory usage:"
            if command -v free >/dev/null 2>&1; then
              free -h
            else
              vm_stat 2>/dev/null | head -10 || echo "Memory stats unavailable"
            fi
            
            echo "Pipx environment:"
            pipx --version || echo "Pipx not available"
            pipx list || echo "No pipx packages installed"
            
            echo "Python environment:"
            python3 -m pip list | head -10 || echo "Pip list failed"
            
            echo "::endgroup::"
            
            # Attempt to get more specific error information
            echo "Attempting to run brew install with different options..."
            brew install --verbose --debug henriqueslab/rxiv-maker/rxiv-maker || echo "Retry with debug failed"
            
            exit 1
          fi
          
          # Calculate installation time  
          end_time=$(date +%s)
          install_duration=$((end_time - start_time))
          echo "⏱️ Installation took ${install_duration}s"
          
          # Verify installation
          brew list henriqueslab/rxiv-maker/rxiv-maker
          echo "✓ rxiv-maker installed successfully"
          echo "::endgroup::"

      - name: 🔍 Verify CLI Installation
        if: matrix.mode != 'fast' && inputs.test_mode != 'fast'
        shell: bash
        run: |
          echo "::group::CLI Verification"
          
          # Check rxiv is in PATH
          if ! which rxiv; then
            echo "❌ rxiv command not found in PATH"
            echo "Current PATH: $PATH"
            # Check if it's installed but not in PATH
            find /opt/homebrew -name "rxiv" 2>/dev/null || find /home/linuxbrew -name "rxiv" 2>/dev/null || true
            exit 1
          fi
          
          # Test basic commands with platform-specific timeout
          echo "Testing rxiv --version..."
          if command -v timeout >/dev/null 2>&1; then
            if timeout $TEST_TIMEOUT rxiv --version; then
              echo "✓ rxiv --version works"
            else
              echo "⚠️ rxiv --version failed, but continuing..."
            fi
          elif command -v gtimeout >/dev/null 2>&1; then
            if gtimeout $TEST_TIMEOUT rxiv --version; then
              echo "✓ rxiv --version works"
            else
              echo "⚠️ rxiv --version failed, but continuing..."
            fi
          else
            if rxiv --version; then
              echo "✓ rxiv --version works"
            else
              echo "⚠️ rxiv --version failed, but continuing..."
            fi
          fi
          
          echo "Testing rxiv --help..."
          if command -v timeout >/dev/null 2>&1; then
            if timeout $TEST_TIMEOUT rxiv --help | head -10; then
              echo "✓ rxiv --help works"
            else
              echo "⚠️ rxiv --help failed, but continuing..."
            fi
          elif command -v gtimeout >/dev/null 2>&1; then
            if gtimeout $TEST_TIMEOUT rxiv --help | head -10; then
              echo "✓ rxiv --help works"
            else
              echo "⚠️ rxiv --help failed, but continuing..."
            fi
          else
            if rxiv --help | head -10; then
              echo "✓ rxiv --help works"
            else
              echo "⚠️ rxiv --help failed, but continuing..."
            fi
          fi
          
          echo "✓ CLI verification completed"
          echo "::endgroup::"

      - name: 🏥 Installation Health Check  
        if: matrix.mode != 'fast' && inputs.test_mode != 'fast'
        shell: bash
        continue-on-error: true
        run: |
          echo "::group::Installation Health Check"
          
          # Run installation check (may take time to install missing deps)
          echo "Running comprehensive installation check..."
          check_cmd="rxiv check-installation --detailed"
          if command -v timeout >/dev/null 2>&1; then
            if timeout $TEST_TIMEOUT $check_cmd; then
              echo "✓ Installation check passed"
            else
              echo "⚠️ Installation check failed - this might be expected in CI"
              echo "This is common in CI environments without LaTeX"
            fi
          elif command -v gtimeout >/dev/null 2>&1; then
            if gtimeout $TEST_TIMEOUT $check_cmd; then
              echo "✓ Installation check passed"
            else
              echo "⚠️ Installation check failed - this might be expected in CI"
              echo "This is common in CI environments without LaTeX"
            fi
          else
            if $check_cmd; then
              echo "✓ Installation check passed"
            else
              echo "⚠️ Installation check failed - this might be expected in CI"
              echo "This is common in CI environments without LaTeX"
            fi
          fi
          
          echo "✓ Health check completed"
          echo "::endgroup::"

      - name: 📝 Create Test Manuscript
        if: matrix.mode != 'fast' && inputs.test_mode != 'fast'
        shell: bash
        continue-on-error: true
        run: |
          echo "::group::Creating Test Manuscript"
          
          # Create test directory with unique name but predictable prefix
          test_dir="test-manuscript-${{ matrix.os }}-${{ matrix.mode }}"
          echo "Creating manuscript in: $test_dir"
          
          # Initialize manuscript (with platform-specific timeout and error handling)
          init_cmd="rxiv init \"$test_dir\""
          init_success=false
          
          if command -v timeout >/dev/null 2>&1; then
            if timeout $TEST_TIMEOUT $init_cmd 2>/dev/null; then
              echo "✓ rxiv init succeeded"
              init_success=true
            fi
          elif command -v gtimeout >/dev/null 2>&1; then
            if gtimeout $TEST_TIMEOUT $init_cmd 2>/dev/null; then
              echo "✓ rxiv init succeeded"
              init_success=true
            fi
          else
            if eval $init_cmd 2>/dev/null; then
              echo "✓ rxiv init succeeded"
              init_success=true
            fi
          fi
          
          if [ "$init_success" = false ]; then
            echo "⚠️ rxiv init failed, creating manual test manuscript..."
            mkdir -p "$test_dir"
            echo "# Test Manuscript" > "$test_dir/01_MAIN.md"
            echo "title: Test Paper" > "$test_dir/00_CONFIG.yml"
            echo "authors:" >> "$test_dir/00_CONFIG.yml"
            echo "  - Test Author" >> "$test_dir/00_CONFIG.yml"
            echo "✓ Manual initialization completed"
          fi
          
          # Verify manuscript structure
          if [[ -d "$test_dir" ]]; then
            echo "📁 Manuscript directory created: $test_dir"
            ls -la "$test_dir"/ || true
            
            # Store test directory for next steps  
            echo "TEST_DIR=$test_dir" >> $GITHUB_ENV
            echo "✓ Test manuscript created successfully"
          else
            echo "⚠️ Manuscript directory not found, skipping PDF generation"
            echo "TEST_DIR=" >> $GITHUB_ENV
          fi
          
          echo "::endgroup::"

      - name: 📄 Generate PDF
        if: matrix.mode != 'fast' && inputs.test_mode != 'fast' && inputs.skip_build != true
        shell: bash
        continue-on-error: true
        run: |
          echo "::group::PDF Generation"
          
          if [[ -z "${TEST_DIR:-}" || ! -d "${TEST_DIR}" ]]; then
            echo "⚠️ TEST_DIR not set or directory doesn't exist, skipping PDF generation"
            echo "::endgroup::"
            exit 0
          fi
          
          # Record start time
          start_time=$(date +%s)
          
          # Attempt PDF generation with platform-specific timeout
          echo "Generating PDF for manuscript: $TEST_DIR"
          pdf_cmd="rxiv pdf \"$TEST_DIR\""
          pdf_success=false
          
          if command -v timeout >/dev/null 2>&1; then
            if timeout $BUILD_TIMEOUT $pdf_cmd 2>&1; then
              pdf_success=true
            fi
          elif command -v gtimeout >/dev/null 2>&1; then
            if gtimeout $BUILD_TIMEOUT $pdf_cmd 2>&1; then
              pdf_success=true
            fi
          else
            if eval $pdf_cmd 2>&1; then
              pdf_success=true
            fi
          fi
          
          if [ "$pdf_success" = true ]; then
            echo "✓ PDF generation command completed"
            
            # Calculate build time
            end_time=$(date +%s)
            build_duration=$((end_time - start_time))
            echo "⏱️ PDF generation took ${build_duration}s"
            
            # Verify PDF was created
            if find "$TEST_DIR" -name "*.pdf" 2>/dev/null | grep -q .; then
              echo "✓ PDF generated successfully"
              find "$TEST_DIR" -name "*.pdf" -exec ls -lh {} \; 2>/dev/null || true
            else
              echo "⚠️ No PDF files found"
            fi
          else
            echo "⚠️ PDF generation failed - this is expected in CI environments without full LaTeX"
            echo "Checking for partial outputs..."
            if [[ -d "$TEST_DIR" ]]; then
              echo "Directory contents:"
              find "$TEST_DIR" -type f \( -name "*.tex" -o -name "*.pdf" -o -name "*.log" \) 2>/dev/null | head -10 || echo "No output files found"
            fi
          fi
          
          echo "::endgroup::"

      - name: 🧪 Test Additional Features
        if: matrix.mode == 'comprehensive' || inputs.test_mode == 'comprehensive'
        shell: bash
        continue-on-error: true
        run: |
          echo "::group::Testing Additional Features"
          
          if [[ -n "${TEST_DIR:-}" && -d "$TEST_DIR" ]]; then
            # Test validation
            echo "Testing manuscript validation..."
            val_cmd="rxiv validate \"$TEST_DIR\""
            if command -v timeout >/dev/null 2>&1; then
              timeout $TEST_TIMEOUT $val_cmd 2>/dev/null || echo "⚠️ Validation not available (expected in CI)"
            elif command -v gtimeout >/dev/null 2>&1; then
              gtimeout $TEST_TIMEOUT $val_cmd 2>/dev/null || echo "⚠️ Validation not available (expected in CI)"
            else
              eval $val_cmd 2>/dev/null || echo "⚠️ Validation not available (expected in CI)"
            fi
            
            # Test bibliography commands
            echo "Testing bibliography features..."
            bib_cmd="rxiv bibliography --help"
            if command -v timeout >/dev/null 2>&1; then
              timeout $TEST_TIMEOUT $bib_cmd 2>/dev/null || echo "⚠️ Bibliography help not available"
            elif command -v gtimeout >/dev/null 2>&1; then
              gtimeout $TEST_TIMEOUT $bib_cmd 2>/dev/null || echo "⚠️ Bibliography help not available"
            else
              $bib_cmd 2>/dev/null || echo "⚠️ Bibliography help not available"
            fi
            
            # Test figure commands  
            echo "Testing figure commands..."
            fig_cmd="rxiv figures --help"
            if command -v timeout >/dev/null 2>&1; then
              timeout $TEST_TIMEOUT $fig_cmd 2>/dev/null || echo "⚠️ Figures help not available"
            elif command -v gtimeout >/dev/null 2>&1; then
              gtimeout $TEST_TIMEOUT $fig_cmd 2>/dev/null || echo "⚠️ Figures help not available"
            else
              $fig_cmd 2>/dev/null || echo "⚠️ Figures help not available"
            fi
            
            echo "✓ Additional features tested"
          else
            echo "⚠️ Skipping additional tests - no test manuscript"
          fi
          
          echo "::endgroup::"

      - name: 🎯 Performance Metrics
        if: always()
        shell: bash
        run: |
          echo "::group::Performance Metrics"
          
          # System resource usage
          echo "System resource usage:"
          if command -v free &> /dev/null; then
            free -h
          fi
          df -h . | tail -1
          
          # Homebrew cache info
          echo "Homebrew cache size:"
          du -sh "$(brew --cache)" 2>/dev/null || echo "Cache size unknown"
          
          # Formula size info
          if brew list henriqueslab/rxiv-maker/rxiv-maker &> /dev/null; then
            echo "Installed formula info:"
            brew info henriqueslab/rxiv-maker/rxiv-maker
          fi
          
          echo "::endgroup::"

      - name: 📊 Prepare Test Artifacts
        if: always() && matrix.mode != 'fast'
        shell: bash
        run: |
          echo "::group::Preparing Artifacts"
          
          # Create artifacts directory
          mkdir -p test-artifacts
          
          # Collect test logs
          if [[ -n "${TEST_DIR:-}" && -d "${TEST_DIR}" ]]; then
            echo "Collecting logs from test directory: $TEST_DIR"
            cp -r "$TEST_DIR" test-artifacts/ 2>/dev/null || echo "No test directory to collect"
          fi
          
          # Collect any standalone log files
          find . -maxdepth 1 -name "*.log" -exec cp {} test-artifacts/ \; 2>/dev/null || true
          
          # Create a summary file
          echo "Test run summary for ${{ matrix.os }} (${{ matrix.mode }})" > test-artifacts/summary.txt
          echo "Date: $(date)" >> test-artifacts/summary.txt
          echo "OS: ${{ matrix.os }}" >> test-artifacts/summary.txt
          echo "Mode: ${{ matrix.mode }}" >> test-artifacts/summary.txt
          
          # List what we collected
          echo "Collected artifacts:"
          find test-artifacts -type f 2>/dev/null || echo "No artifacts collected"
          
          echo "::endgroup::"

      - name: 📊 Collect Artifacts
        if: always() && matrix.mode != 'fast'
        uses: actions/upload-artifact@v4
        with:
          name: test-outputs-${{ matrix.os }}-${{ matrix.mode }}
          path: test-artifacts/
          retention-days: 7
          if-no-files-found: ignore

      - name: 🧹 Cleanup
        if: always()
        shell: bash
        run: |
          echo "::group::Cleanup"
          
          # Remove test manuscript
          if [[ -n "${TEST_DIR:-}" && -d "$TEST_DIR" ]]; then
            rm -rf "$TEST_DIR"
            echo "✓ Cleaned up test manuscript"
          fi
          
          # Remove artifacts directory
          if [[ -d "test-artifacts" ]]; then
            rm -rf test-artifacts
            echo "✓ Cleaned up artifacts directory"
          fi
          
          # Optionally uninstall formula (keep for debugging)
          if [[ "${{ matrix.mode }}" == "comprehensive" ]]; then
            brew uninstall henriqueslab/rxiv-maker/rxiv-maker 2>/dev/null || echo "Formula not installed or already removed"
            echo "✓ Formula uninstalled"
          fi
          
          echo "::endgroup::"

  summary:
    name: 📋 Test Summary  
    runs-on: ubuntu-latest
    needs: [validate-installation]
    if: always()
    steps:
      - name: 📊 Test Results Summary
        run: |
          echo "## 🧪 Homebrew Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check results
          if [[ "${{ needs.validate-installation.result }}" == "success" ]]; then
            echo "✅ **All tests passed!** rxiv-maker Homebrew installation works correctly across all tested platforms." >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.validate-installation.result }}" == "failure" ]]; then
            echo "❌ **Some tests failed.** Check the job logs for details." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Tests completed with warnings.** Some non-critical tests may have failed." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Matrix Results:" >> $GITHUB_STEP_SUMMARY
          echo "- macOS (latest): ${{ contains(needs.validate-installation.result, 'success') && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Ubuntu (latest): ${{ contains(needs.validate-installation.result, 'success') && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY